name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: "false"

jobs:
  Test:
    strategy:
      fail-fast: false # We want all of them to run, even if one fails
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        pg: [ "13", "14", "15", "16", "17", "18" ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      - name: Install icu
        if: runner.os == 'macOS' && (matrix.pg == '16' || matrix.pg == '17' || matrix.pg == '18')
        run: |
          brew install icu4c
          echo "PKG_CONFIG_PATH=$(brew --prefix icu4c)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
      - name: Install readline
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libreadline-dev
      - name: Install cargo-pgrx
        run: |
          PGRX_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[]|select(.name=="pgrx")|.version')
          cargo install --locked --version=$PGRX_VERSION cargo-pgrx --debug --force
          cargo pgrx init --pg${{ matrix.pg }} download
      - name: Run unit tests
        run: cd plprql && echo "\q" | cargo pgrx run pg${{ matrix.pg }} && cargo test --no-default-features --features pg${{ matrix.pg }}
      - name: Run integration tests
        run: cd plprql && echo "\q" | cargo pgrx run pg${{ matrix.pg }} && cd ../plprql-tests && cargo test --no-default-features --features pg${{ matrix.pg }}
  Install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Install PostgreSQL headers
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg lsb-release
          sudo sh -c 'echo "deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y postgresql-18 postgresql-server-dev-18
      - name: Install cargo-pgrx
        run: |
          PGRX_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[]|select(.name=="pgrx")|.version')
          cargo install --locked --version=$PGRX_VERSION cargo-pgrx --debug --force
          cargo pgrx init --pg18 $(which pg_config)
      - name: Install PL/PRQL
        run: |
          cd plprql
          cargo pgrx install --no-default-features --release --sudo
      - name: Start PostgreSQL
        run: |
          sudo pg_ctlcluster 18 main start
          /usr/lib/postgresql/18/bin/pg_isready
          # superuser (-s), can create databases (-d), can create roles (-r), no password prompt (-w) named runner
          sudo -u postgres /usr/lib/postgresql/18/bin/createuser -s -d -r -w runner
      - name: Verify install
        run: |
          /usr/lib/postgresql/18/bin/createdb -U runner runner
          /usr/lib/postgresql/18/bin/psql -U runner -c "create extension plprql;"
          /usr/lib/postgresql/18/bin/psql -U runner -c "select prql_to_sql('from table');"
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run rustfmt
        run: cargo fmt -- --check
  rust-clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Install readline
        run: sudo apt-get install libreadline-dev
      - name: Install cargo-pgrx
        run: |
          PGRX_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[]|select(.name=="pgrx")|.version')
          cargo install --locked --version=$PGRX_VERSION cargo-pgrx --debug --force
          cargo pgrx init --pg18 download
      - name: Run clippy
        run: cargo clippy --all-targets --no-default-features --features pg18 -- -D warnings
  commitlint:
    runs-on: ubuntu-latest
    name: Conventional Commits
    steps:
      - name: Run commitlint
        uses: opensource-nepal/commitlint@v1

